// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum SessionType {
  timer
  stopwatch
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  passwordHash      String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  role              Role               @default(USER)
  passwordChangedAt DateTime           @default(now())
  UserInvalidToken  UserInvalidToken[]
  twoFAEnable       Boolean            @default(false)
  twoFASecret       String?
  Category          Category[]
  Session           Session[]
}

model Category {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  name      String
  color     String? // optional UI color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions Session[]
}

model Session {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  type               SessionType
  durationSeconds    Int? // planned duration for timer mode
  elapsedSeconds     Int         @default(0) //The total focus time that has actually passed, in seconds.
  totalPausedSeconds Int         @default(0) //Total amount of time the session was paused, in seconds.
  startedAt          DateTime
  endedAt            DateTime?
  isCompleted        Boolean     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id           Int    @id @default(autoincrement())
  userId       Int
  refreshToken String @unique
}

model UserInvalidToken {
  id             Int    @id @default(autoincrement())
  accessToken    String
  userId         Int
  expirationTime Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
